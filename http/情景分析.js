/* 
  静态资源
    一个网站比如今日头条官网，看他请求的css文件，刷新一下
    显示200（from disk cache）----- 缓存中拿，而非请求成功拿到
    （强缓存 Cache-control：max-age=31536000   一年
      content-type: text/css; charset=utf-8） 
  扩展
    静态资源的部署（优化）：
      缓存 + CDN + 文件hash
    （从上面可以知道，缓存，本地读取文件，很快，但是第一次呢？
      所以我们会把静态资源都放CDN上 -- Content Delivery Network内容分发网
      通过用户就近性和服务器负载的判断，CDN确保内容以一种极为高效的方式为用户
      的请求提供服务
      然后为了保证用户拿到的内容够新，比如改了css内容
      改个名字，用户就会去拿最新，而不是一年缓存继续用
      ）
  ===============================================================
  登录
    ----------------------------------------------------------------
    在今日头条网站登录后，Network，All，过滤quick_login，可以看到有两个请求
    一个是Options请求，一个是post请求。（请求地址是..../sso.toutiao.com/...---跨域）
    这个Options是预请求，通过这个请求，我们知晓一下服务端server是否允许这次跨域资源
    可以，再进行后续流程,看login_request.jpg

    （补充跨域CORS Cross-Origin Resource Sharing
        https默认port：443，http是80
        https://www.exam.com和https://www.exam.com:443同源
        上述登录用的，是发送预请求的方式
        还有就是代理服务器和Iframe，后者不方便，只说代理服务器
        因为跨域问题是浏览器的安全策略---同源策略，不是http的
        通过代理服务器绕开浏览器的限制，就可以天然的解决跨域问题
        部署了一个跟当前域名，放在同域下的代理服务器，去请求的时候，
        先去代理服务器那里，无跨域问题。
        代理服务器在再去转发请求，拿到响应后，转发响应。
      ）

    ----------------------------------------------------------------
    我们登陆之后，刷新，为什么页面还能记住我们的登录信息呢？
    http不是一个无状态的请求吗？他不应该记住我做过登录这个操作啊。
      这里涉及到鉴权的方案。
    
    鉴权
      Session + cookie
        post信息到server后，server返回，Set-Cookie帮我们种到对应的域名和地址下
        下次登录，浏览器自己会带上cookie，之后服务器就可以识别用户身份，返回对应内容。
      JWT(Json web token)
        和上面的差不多，除了token，要自己设置，比如到请求头里。
        且Server是不本地存储token的，而是解析是否符合规则，有效，拿到对应用户信息。
        （优点：token唯一性 --- 改密码，注册时候的邮箱验证链接，可能就是通过用户token做的）

    ----------------------------------------------------------------
    头条网站，我们点写文章，可以看到域名变了，但是用户还是登录态
    怎么实现的，跨了网站，但是信息保留。
      SSO：单点登录（Single Sign On）
      把整个软件全套看做一个应用，不同域名看做不同的子应用，之间用户信息可以互通
      看图 sso单点登录过程.png

  ===============================================================
  拓展
    QUIC（Quick UDP Internet Connection）基于UDP封装的新版本的协议
    equivalent to TCP + TLS
*/