/* 
  React设计思路：
    UI编程的痛点
    1、状态更新，UI不会自动更新，需要手动调用DOM进行更新
    2、欠缺基本的代码层面的封装和隔离，代码层面没有组件化
    3、UI之间的数据依赖关系，需要手动维护，如果依赖链路长，就会遇到Callback Hell
    （当某个东西改变的时候，另外的一些东西也要跟着改变---过程式的编程去调callback，会很难受）

  响应式系统
    事件 ----> 执行既定的回调 ----> 状态变更
  前端UI
    事件 ----> 执行既定的回调 ----> 状态变更  -----> UI更新
  我们期望：
    1、状态更新，UI自动更新。
    2、前端代码组件化，可以复用。
    3、状态之间的互相依赖关系，只需要声明即可。
      （比如A永远等于B+C，如果是过程式编程，每次B和C改变，都得回调去改变A）

  状态归属问题：
    1、React是单向数据流，子组件如果要改变父组件状态，
        只能通过执行父组件传过来的函数，永远是父组件向子组件传东西。
    2、如何解决状态不合理上升的问题？
      状态管理
    3、组件状态改变后，如何更新DOM？
      看React的实现算法

  组件设计
    1、组件声明了状态和 UI的映射（映射：函数关系，输入状态返回UI）。
    2、组件有Props/State两种状态（外部传入的 和 内部自己的）
    3、“组件”可由其他组件拼成
  
  有副作用的函数，一般都是在一个特定的时间点去执行，比如我发起一个请求，
  我改变一个title，什么状态变了我才去进行一个响应。
  useEffect包裹函数后，只有在第二参数依赖项数组中 依赖项被set的时候，以及
  函数在mount时，才会执行。
*/