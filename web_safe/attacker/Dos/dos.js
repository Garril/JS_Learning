/* 
  Denial of Service(Dos)
  通过某种方式（构造特定请求），导致服务器资源被显著的消耗
  来不及响应更多请求，导致请求挤压，进而雪崩效应。

  1、ReDos：基于正则表达式的 Dos
    利用正则匹配的贪婪：
          ---- n次不行，n-1次呢？的这种回溯情况
      比如 /^((ab)*)+$/
      ab 和 abababab 都可以很快的匹配
      但是 ababababababa，最后加个a，不符合
      他看到最后一个a匹配不上，会去减少一次ab重复，然后再试一试
      去掉2个ab试一试，直到最后失败。
      攻击者就是使用可以回溯的字符串进行攻击，
      服务器端响应时间大大延长，导致接口吞吐量明显减低
    =========================================================
    补充 正则默认贪婪
    const greedyRegExp = /a+/;
    const nonGreedyRegExp = /a+?/;
    前者有多少a匹配多少，后者只匹配一个
    str="aaaaa";
    str.match(greedyRegExp)[0]
    str.match(nonGreedyRegExp)[0]
    =========================================================
  2、DDos：（最常见）Distributed Dos
    短时间内攻击者构造大量的僵尸设备的请求流量，服务器不能及时的完成
    全部请求，导致请求堆积，进而雪崩，无法响应新请求。

    特点：
      直接访问 IP （不会限制在域名的访问）
      任意的 API
      要耗尽你的带宽

    DDos demo：
      攻击端发送大量的 TCP请求，发SYN给服务器
      服务器 返回规范的 SYN + ACK
      但是攻击端此时，不会返回第三次ACK
      连接数不能被释放，服务器达到最大请求数，
      无法响应新请求
    =========================================================
    传输层的一种攻击
      中间人攻击。浏览器和服务端中间多了一层中间人
      但是浏览器和服务端以为他们两个是正常交流，不知道
      可能出现的原因：
        1、明文传输
        2、信息篡改不可知
        3、对方身份未验证
*/